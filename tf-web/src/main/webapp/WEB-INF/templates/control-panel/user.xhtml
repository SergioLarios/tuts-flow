<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring3-3.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">

	<head>
		<title>Control Panel : USER</title>
	</head>
	
	<body>
		<!--/* Content */-->
		
		<div th:fragment="main">
			
			<div class="page-header">
				<h1 th:text="#{cp.user}"/>
			</div>
			
			<!--/* Data table */-->
			
			<div class="cp-table-wrapper">
				<div id="user-data-table"/>
				<div id="user-pagination" class="cp-table-bottom"/>
			</div>
			
			<!-- *************************** -->
			<!--  JavaScript	             -->
			<!-- *************************** -->
		
			<script type="text/javascript" th:inline="javascript">
			/*<![CDATA[*/
				
			YUI().use('aui-datatable', 'aui-pagination', 'aui-io-request', 'aui-node', function(Y) {
                       
				var page = 0;
				var size = 5;
				var table;
				var pagination;
				var numPages = [5, 10, 30, 100];
				var pagesText;
				
				// ***** Initial Render *****
				
				createPagination('#user-pagination');
				
				// ***** END Initial Render *****
				
				// Pagination
				
				function createPagination(node){
					
					pagination = new Y.Pagination({
						page: 1,
						offset: 1,
						total: 3,
						circular: false,
						strings: {
				          next: '>',
				          prev: '<'
				        },
				        after: {
				        	changeRequest: function(event) {
				        		page = event.state.page - 1;
				        		findData(page, size, '#user-data-table');
				        	}
				        }
					}).render(node);
					
				}
				
				// Ajax call

				function findData(inPage, inSize, node) {

					var outData = null;

					Y.io.request(
						[[@{${T(org.tutsflow.constant.Services).USER}}]] +'/' + inPage + '/' + inSize,
						{
							dataType: 'json',
							on: {
								success: function() {
									
									resData = this.get('responseData');
									
									if (!table) {
										pagesText = resData.pageText;
										createTable(resData.data);
										table.render(node);
									}
									else {
										table.set('data', resData.data);
										Y.one('#cp-table-pages-text').html(resData.pageText);

										// loading pagination twice to select the page
										pagination.set('total', resData.totalPages);
										pagination.set('page', inPage + 1);
										
									}

								}
							}
						}
					);

				}

				// Data table creation
				
                function createTable(inData) {
					
                	table = new Y.DataTable({
                        
    					columns: [
    						{ key: 'userName', label: 'Name' },
    						{ key: 'userNameSimple', label: 'NameSimple' },
    						{ key: 'mail', label: 'Mail' },
    						{ key: 'type', label: 'Type', formatter:function(o){
    							if (o.data.type === 2) {
    								return 'admin';
    							}
    							else {
    								return 'normal';
    							}
    							
    						}}
    					],
    					data: inData
    					
    				});
                	
					createRowsPerPage();
					setPagesText(Y.one('#cp-table-drop-down'));
				}

				function createRowsPerPage() {

					var opts = '';
					for (var i = 0; i < numPages.length; i++) {
						var vl = numPages[i];
						opts = opts + '<option value="' + vl + '">' + vl + '</option>';
					};

					var dropDown = 
					'<select class="form-control input-sm page-drop-down" id="cp-table-drop-down">'+
					'	' + opts +
					'</select>';

					// Node creation
					var dropDownPages = Y.Node.create(dropDown);
					dropDownPages.on('change', function(event){
						size = numPages[event.target.get('selectedIndex')];
						findData(0, size, '#user-data-table');
					});
					Y.one('#user-pagination .pagination').placeAfter(dropDownPages);

				}

				function setPagesText(inNode) {
					var strText = '<div class="pages-text" id="cp-table-pages-text">' + pagesText + '</div>';
					inNode.placeAfter(strText);
				}
				
			});

			/*]]>*/
			</script>
		
		</div>
	
	</body>
	
</html>
